{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE } from \"../constants/index\";\nimport { SnapshotViewIOSCOmponent } from \"react-native-web/dist/index\";\n\nrequire('firebase/firestore');\n\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"User\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log(\"Snapshot Does Not Exist\");\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"Posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var dataID = doc.id;\n        return _objectSpread({\n          dataID: dataID\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/tonyamin/Desktop/Projects/BIOME/redux/actions/index.js"],"names":["firebase","USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","SnapshotViewIOSCOmponent","require","fetchUser","dispatch","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","type","data","console","log","fetchUserPosts","orderBy","posts","docs","map","dataID","id"],"mappings":";;;;;;AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAAQC,iBAAR,EAA2BC,uBAA3B;SACQC,wB;;AACRC,OAAO,CAAC,oBAAD,CAAP;;AAIA,OAAO,SAASC,SAAT,GAAqB;AACxB,SAAO,UAACC,QAAD,EAAc;AACjBN,IAAAA,QAAQ,CAACO,SAAT,GACKC,UADL,CACgB,MADhB,EAEKC,GAFL,CAEST,QAAQ,CAACU,IAAT,GAAgBC,WAAhB,CAA4BC,GAFrC,EAGKC,GAHL,GAIKC,IAJL,CAIU,UAACC,QAAD,EAAc;AAChB,UAAGA,QAAQ,CAACC,MAAZ,EAAmB;AACfV,QAAAA,QAAQ,CAAC;AAACW,UAAAA,IAAI,EAAEhB,iBAAP;AAA0BU,UAAAA,WAAW,EAAEI,QAAQ,CAACG,IAAT;AAAvC,SAAD,CAAR;AACH,OAFD,MAGI;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACH;AACJ,KAXL;AAYH,GAbD;AAcH;AAED,OAAO,SAASC,cAAT,GAA0B;AAC7B,SAAO,UAACf,QAAD,EAAc;AACjBN,IAAAA,QAAQ,CAACO,SAAT,GACKC,UADL,CACgB,OADhB,EAEKC,GAFL,CAEST,QAAQ,CAACU,IAAT,GAAgBC,WAAhB,CAA4BC,GAFrC,EAGKJ,UAHL,CAGgB,WAHhB,EAIKc,OAJL,CAIa,UAJb,EAIyB,KAJzB,EAKKT,GALL,GAMKC,IANL,CAMU,UAACC,QAAD,EAAc;AAChB,UAAIQ,KAAK,GAAGR,QAAQ,CAACS,IAAT,CAAcC,GAAd,CAAkB,UAAAhB,GAAG,EAAI;AAGjC,YAAMS,IAAI,GAAGT,GAAG,CAACS,IAAJ,EAAb;AACA,YAAMQ,MAAM,GAAGjB,GAAG,CAACkB,EAAnB;AACA;AAAQD,UAAAA,MAAM,EAANA;AAAR,WAAmBR,IAAnB;AACH,OANW,CAAZ;AAOAZ,MAAAA,QAAQ,CAAC;AAACW,QAAAA,IAAI,EAAEf,uBAAP;AAAgCqB,QAAAA,KAAK,EAALA;AAAhC,OAAD,CAAR;AACH,KAfL;AAgBH,GAjBD;AAkBH","sourcesContent":["// making a call to fetch user, call user, and save posts\nimport firebase from 'firebase'\nimport {USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE} from '../constants/index'\nimport {SnapshotViewIOSCOmponent} from 'react-native'\nrequire('firebase/firestore')\n\n// ------------------------------------------------------------------------------------\n\nexport function fetchUser() {\n    return((dispatch) => {\n        firebase.firestore()\n            .collection(\"User\")\n            .doc(firebase.auth().currentUser.uid)\n            .get()\n            .then((snapshot) => {\n                if(snapshot.exists){\n                    dispatch({type: USER_STATE_CHANGE, currentUser: snapshot.data()})\n                }\n                else{\n                    console.log(\"Snapshot Does Not Exist\")\n                }\n            })\n    })\n}\n\nexport function fetchUserPosts() {\n    return((dispatch) => {\n        firebase.firestore()\n            .collection(\"Posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                let posts = snapshot.docs.map(doc => {\n                    // map function will iterate through all docs in the snapshot and build an array\n                    // of posts\n                    const data = doc.data();\n                    const dataID = doc.id;\n                    return {dataID, ...data}\n                })\n                dispatch({type: USER_POSTS_STATE_CHANGE, posts}) \n            })\n    })\n}"]},"metadata":{},"sourceType":"module"}