{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/tonyamin/Desktop/Projects/BIOME/components/main/Save.js\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport firebase from 'firebase';\nimport { NavigationContainer } from '@react-navigation/native';\n\nrequire(\"firebase/firestore\");\n\nrequire(\"firebase/firebase-storage\");\n\nexport default function Save(props, _ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      caption = _useState2[0],\n      setCaption = _useState2[1];\n\n  var childPath = \"Posts/\" + firebase.auth().currentUser.uid + \"/\" + Math.random().toString(36);\n\n  var uploadImage = function uploadImage() {\n    var uri, response, blob, task, taskProgress, taskCompleted, taskError;\n    return _regeneratorRuntime.async(function uploadImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            uri = props.route.params.image;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 6:\n            blob = _context.sent;\n            task = firebase.storage().ref().child(childPath).put(blob);\n\n            taskProgress = function taskProgress(snapshot) {\n              console.log(\"transferred: \" + snapshot.bytesTransferred);\n            };\n\n            taskCompleted = function taskCompleted() {\n              task.snapshot.ref.getDownloadURL().then(function (snapshot) {\n                savePostData(snapshot);\n                console.log(snapshot);\n              });\n            };\n\n            taskError = function taskError(snapshot) {\n              console.log(snapshot);\n            };\n\n            task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var savePostData = function savePostData(downloadURL) {\n    firebase.firestore().collection('Posts').doc(firebase.auth().currentUser.uid).collection('userPosts').add({\n      downloadURL: downloadURL,\n      caption: caption,\n      creation: firebase.firestore.FieldValue.serverTimestamp()\n    }).then(function () {\n      props.navigation.popToTop;\n    });\n  };\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: props.route.params.image\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Enter Caption...\",\n    onChangeText: function onChangeText(caption) {\n      return setCaption(caption);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), React.createElement(Button, {\n    title: \"Save\",\n    onPress: function onPress() {\n      return uploadImage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/tonyamin/Desktop/Projects/BIOME/components/main/Save.js"],"names":["React","useState","firebase","NavigationContainer","require","Save","props","navigation","caption","setCaption","childPath","auth","currentUser","uid","Math","random","toString","uploadImage","uri","route","params","image","fetch","response","blob","task","storage","ref","child","put","taskProgress","snapshot","console","log","bytesTransferred","taskCompleted","getDownloadURL","then","savePostData","taskError","on","downloadURL","firestore","collection","doc","add","creation","FieldValue","serverTimestamp","popToTop","flex"],"mappings":"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","sourcesContent":["// saving images taken by camera\n\nimport React, {useState} from 'react'\nimport {View, TextInput, Image, Button} from 'react-native'\n\nimport firebase from 'firebase'\nimport { NavigationContainer } from '@react-navigation/native'\nrequire(\"firebase/firestore\")\nrequire(\"firebase/firebase-storage\")\n\n// ------------------------------------------------------------------------------------\n\nexport default function Save(props, {navigation}) {\n    const [caption, setCaption] = useState(\"\")\n\n    const childPath = `Posts/${firebase.auth().currentUser.uid}/${Math.random().toString(36)}`;\n\n    const uploadImage = async () => {\n        const uri = props.route.params.image;\n        const response = await fetch(uri);\n        const blob = await response.blob();\n        const task = firebase\n            .storage()\n            .ref()\n            .child(childPath)\n            .put(blob)\n\n        const taskProgress = snapshot => {\n            console.log(`transferred: ${snapshot.bytesTransferred}`)\n        }\n\n        const taskCompleted = () => {\n            task.snapshot.ref.getDownloadURL().then((snapshot) => {\n                savePostData(snapshot);\n                console.log(snapshot)\n            })\n        }\n\n        const taskError = snapshot => {\n            console.log(snapshot)\n        }\n\n        task.on(\"state_changed\", taskProgress, taskError, taskCompleted);\n    }\n\n    const savePostData = (downloadURL) => {\n        firebase.firestore()\n            .collection('Posts')\n            .doc(firebase.auth().currentUser.uid)\n            .collection('userPosts')\n            .add({\n                downloadURL,\n                caption,\n                creation: firebase.firestore.FieldValue.serverTimestamp()\n            }).then((function () {\n                props.navigation.popToTop\n            }))\n    }\n\n    return (\n        <View style = {{flex: 1}}>\n            <Image source = {{uri: props.route.params.image}} />\n            <TextInput \n                placeholder = \"Enter Caption...\"\n                onChangeText = {(caption) => setCaption(caption)}\n            />\n            <Button title = \"Save\" onPress = {() => uploadImage()}/>\n        </View>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}