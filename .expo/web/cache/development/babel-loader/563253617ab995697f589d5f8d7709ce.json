{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/tonyamin/Desktop/Projects/BIOME/components/main/Search.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport firebase from 'firebase';\n\nrequire('firebase/firestore');\n\nexport default function Search(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      users = _useState2[0],\n      setUsers = _useState2[1];\n\n  var fetchUsers = function fetchUsers(search) {\n    firebase.firestore().collection('Users').where('name', '>=', search).get().then(function (snapshot) {\n      var users = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var dataID = doc.id;\n        return _objectSpread({\n          dataID: dataID\n        }, data);\n      });\n      setUsers(users);\n    });\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Search Users...\",\n    onChangeText: function onChangeText(search) {\n      return fetchUsers(search);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), React.createElement(FlatList, {\n    numColumns: 1,\n    horizontal: false,\n    data: Users,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(TouchableOpacity, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }\n      }, \"onPres = \", function () {\n        return props.navigation.navigate(\"Profile\", {\n          uid: item.id\n        });\n      }, React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 25\n        }\n      }, \" \", item.name, \" \"));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/tonyamin/Desktop/Projects/BIOME/components/main/Search.js"],"names":["React","useState","firebase","require","Search","props","users","setUsers","fetchUsers","search","firestore","collection","where","get","then","snapshot","docs","map","doc","data","dataID","id","Users","item","navigation","navigate","uid","name"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;;AAGA,OAAOC,QAAP,MAAqB,UAArB;;AACAC,OAAO,CAAC,oBAAD,CAAP;;AAGA,eAAe,SAASC,MAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AAAA,kBACTJ,QAAQ,CAAC,EAAD,CADC;AAAA;AAAA,MAC5BK,KAD4B;AAAA,MACrBC,QADqB;;AAEnC,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAY;AAC3BP,IAAAA,QAAQ,CAACQ,SAAT,GACCC,UADD,CACY,OADZ,EAECC,KAFD,CAEO,MAFP,EAEe,IAFf,EAEqBH,MAFrB,EAGCI,GAHD,GAICC,IAJD,CAIM,UAACC,QAAD,EAAc;AAChB,UAAIT,KAAK,GAAGS,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkB,UAAAC,GAAG,EAAI;AAGjC,YAAMC,IAAI,GAAGD,GAAG,CAACC,IAAJ,EAAb;AACA,YAAMC,MAAM,GAAGF,GAAG,CAACG,EAAnB;AACA;AAAQD,UAAAA,MAAM,EAANA;AAAR,WAAmBD,IAAnB;AACH,OANW,CAAZ;AAOAZ,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAbD;AAcH,GAfD;;AAgBA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,SAAD;AACI,IAAA,WAAW,EAAG,iBADlB;AAEI,IAAA,YAAY,EAAI,sBAACG,MAAD;AAAA,aAAYD,UAAU,CAACC,MAAD,CAAtB;AAAA,KAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAOI,oBAAC,QAAD;AACI,IAAA,UAAU,EAAI,CADlB;AAEI,IAAA,UAAU,EAAI,KAFlB;AAGI,IAAA,IAAI,EAAIa,KAHZ;AAII,IAAA,UAAU,EAAI;AAAA,UAAEC,IAAF,QAAEA,IAAF;AAAA,aACV,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACc;AAAA,eAAMlB,KAAK,CAACmB,UAAN,CAAiBC,QAAjB,CAA0B,SAA1B,EAAqC;AAACC,UAAAA,GAAG,EAAEH,IAAI,CAACF;AAAX,SAArC,CAAN;AAAA,OADd,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAQE,IAAI,CAACI,IAAb,MAFJ,CADU;AAAA,KAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADJ;AAqBH","sourcesContent":["import React, {useState} from 'react'\nimport {View, Text, TextInput, FlatList, TouchableOpacity} from 'react-native'\n\nimport firebase from 'firebase';\nrequire('firebase/firestore');\n// ------------------------------------------------------------------------------------\n\nexport default function Search (props) {\n    const [users, setUsers] = useState([])\n    const fetchUsers = (search) => {\n        firebase.firestore()\n        .collection('Users')\n        .where('name', '>=', search) // will try to find documents from the user collection that is similar to what is searched\n        .get()\n        .then((snapshot) => {\n            let users = snapshot.docs.map(doc => {\n                // map function will iterate through all docs in the snapshot and build an array\n                // of posts\n                const data = doc.data();\n                const dataID = doc.id;\n                return {dataID, ...data}\n            });\n            setUsers(users)\n        })\n    }\n    return (\n        <View>\n            { /* whenever a user changes a letter or part of the string fetch users will be called */}\n            <TextInput \n                placeholder = \"Search Users...\"\n                onChangeText = {(search) => fetchUsers(search)} \n            />\n            \n            <FlatList \n                numColumns = {1} // one user appears per line\n                horizontal = {false}\n                data = {Users}\n                renderItem = {({item}) => (\n                    <TouchableOpacity>\n                        onPres = {() => props.navigation.navigate(\"Profile\", {uid: item.id})}\n                        <Text> {item.name} </Text>\n                    </TouchableOpacity>\n                )} // renders out every item and navigates to that profile page\n            />\n        </View>\n    )\n}\n\n\n// generalizing user profile screens"]},"metadata":{},"sourceType":"module"}