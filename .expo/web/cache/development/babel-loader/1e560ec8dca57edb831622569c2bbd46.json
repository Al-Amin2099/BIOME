{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/tonyamin/Desktop/Projects/BIOME/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport LandingScreen from \"./components/auth/LandingPage\";\nimport RegisterScreen from \"./components/auth/Register\";\nimport * as firebase from 'firebase';\nimport { Provider } from 'react-dredux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from \"./redux/reducers\";\nimport thunk from 'redux-thunk';\nimport MainScreen from \"./components/Main\";\nvar store = createStroe(rootReducer, applyMiddleware(thunk));\nvar firebaseConfig = {\n  apiKey: \"AIzaSyANjOkbe0b8_n8Y4qIzzppjqh5xLjgMBzg\",\n  authDomain: \"biome-dev.firebaseapp.com\",\n  projectId: \"biome-dev\",\n  storageBucket: \"biome-dev.appspot.com\",\n  messagingSenderId: \"814850657790\",\n  appId: \"1:814850657790:web:785b1a7d00ca7a022a44af\",\n  measurementId: \"G-X0KG0VKNFG\"\n};\n\nif (firebase.apps.length === 0) {\n  firebase.initializeApp(firebaseConfig);\n}\n\nvar Stack = createStackNavigator();\nexport var App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      loaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      firebase.auth().onAuthStateChanged(function (user) {\n        if (!user) {\n          _this2.setState({\n            loggedIn: false,\n            loaded: true\n          });\n        } else {\n          _this2.setState({\n            loggedIn: true,\n            loaded: true\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loggedIn = _this$state.loggedIn,\n          loaded = _this$state.loaded;\n\n      if (!loaded) {\n        return React.createElement(View, {\n          style: {\n            flex: 1,\n            justifyContent: 'center'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 11\n          }\n        }, \" Loading \"));\n      }\n\n      if (!loggedIn) {\n        return React.createElement(NavigationContainer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 9\n          }\n        }, \" \", React.createElement(Stack.Navigator, {\n          initialRouteName: \"Landing\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }\n        }, React.createElement(Stack.Screen, {\n          name: \"Landing\",\n          component: LandingScreen,\n          options: {\n            headerShown: false\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }\n        }), React.createElement(Stack.Screen, {\n          name: \"Register\",\n          component: RegisterScreen,\n          options: {\n            headerShown: false\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      return React.createElement(Provider, {\n        store: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      }, React.createElement(MainScreen, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\nexport default App;","map":{"version":3,"sources":["/Users/tonyamin/Desktop/Projects/BIOME/App.js"],"names":["StatusBar","React","Component","NavigationContainer","createStackNavigator","LandingScreen","RegisterScreen","firebase","Provider","createStore","applyMiddleware","rootReducer","thunk","MainScreen","store","createStroe","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","apps","length","initializeApp","Stack","App","props","state","loaded","auth","onAuthStateChanged","user","setState","loggedIn","flex","justifyContent","headerShown"],"mappings":"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","sourcesContent":["import {StatusBar} from 'expo-status-bar';\nimport React, {Component} from 'react';\nimport {Text, View} from 'react-native';\n\n// main file that contains the routes\nimport {NavigationContainer} from \"@react-navigation/native\"; \nimport {createStackNavigator} from \"@react-navigation/stack\"; \n\nimport LandingScreen from './components/auth/LandingPage'\nimport RegisterScreen from './components/auth/Register'\n\n// imports packages and fucntions from firebase\nimport * as firebase from 'firebase'\n\n// importing redux and everything that requires redux\nimport {Provider} from 'react-dredux'\nimport {createStore, applyMiddleware} from 'redux'\nimport rootReducer from './redux/reducers'\nimport thunk from 'redux-thunk'\nimport MainScreen from './components/Main'\n\n// -------------------------------------------------------------------------------------------\n\nconst store = createStroe(rootReducer, applyMiddleware(thunk))\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyANjOkbe0b8_n8Y4qIzzppjqh5xLjgMBzg\",\n  authDomain: \"biome-dev.firebaseapp.com\",\n  projectId: \"biome-dev\",\n  storageBucket: \"biome-dev.appspot.com\",\n  messagingSenderId: \"814850657790\",\n  appId: \"1:814850657790:web:785b1a7d00ca7a022a44af\",\n  measurementId: \"G-X0KG0VKNFG\"\n};\n\n// initialize firebase project\n// makes sure that no firebase instance is running at the moment\n// will crash if another firebase app is running while trying to initialize\nif(firebase.apps.length === 0){\n  firebase.initializeApp(firebaseConfig)\n}\n\n// stack navigator tag for screens\nconst Stack = createStackNavigator();\n\nexport class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      loaded: false,\n    }\n  }\n\n  // called when component actually mounts\n  componentDidMount(){\n    // listening for auth changes\n    firebase.auth().onAuthStateChanged((user) => {\n      // user not loaded and isnt logged in\n      if(!user){\n        this.setState({\n          loggedIn: false,\n          loaded: true,\n        })\n      }\n      else {\n        this.setState({\n          loggedIn: true,\n          loaded: true,\n        })\n      }\n    })\n  }\n\n  render() {\n    const {loggedIn, loaded} = this.state;\n    if(!loaded){\n      // overides navigation container\n      return(\n        <View style = {{flex: 1, justifyContent: 'center'}}>\n          <Text> Loading </Text>\n        </View>\n      )\n    }\n\n    if(!loggedIn) {\n      return (\n        // navigation container - parent tag for all routes\n        <NavigationContainer> {} \n    \n          <Stack.Navigator initialRouteName = \"Landing\">\n    \n            <Stack.Screen name = \"Landing\" component = {LandingScreen} options = {{headerShown: false}} />\n            <Stack.Screen name = \"Register\" component = {RegisterScreen} options = {{headerShown: false}} />\n    \n          </Stack.Navigator>\n    \n        </NavigationContainer>\n        \n      );\n    }\n\n    return(\n      <Provider store = {store}>\n        <MainScreen/>\n      </Provider>\n    )\n\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}